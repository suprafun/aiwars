server:

maps: playing fields
databases: unit, building and terrain rules


The server can be asked for a list of map names and a list of database names, and it can be asked to provide
map or database data for a given name.


server provides interface for client (CLIENT -> SERVER):

-- pre-game commands --
connect() -> connects this client with the server
set_mode(mode) -> mode is either 'observer' or 'player'
set_name(name) -> sets this clients name
ready() -> indicates that this client is ready to start a game

-- game commands --
move_unit(unit_id, route)
load_unit(unit_id, target_id, route)
unload_unit(unit_id, destination)
supply_surrounding_units(unit_id, route)
attack_unit(unit_id, target_id, route)
combine_units(unit_id, target_id, route)
build_unit(unit_type_id, building_id)
capture_building(unit_type_id, route)
end_turn()


client provides interface for server (SERVER -> CLIENT):

-- pre-game commands --
send_map_data() -> sends the chosen map data to the client
send_database_data() -> sends the unit/building/terrain data to the client
send_game_parameters() -> sends information like fog-of-war on/off, victory terms, etc.
game_starts() -> signals a game start

-- game commands --
turn_starts() -> it's time for this client to play his turn
confirmation() -> success, trapped, failure
situation_update() -> send a client-specific situation update,
                      containing only the data that can be seen by this client
                      (important distinction when using fog-of-war),
                      note that this also contains money (e.g. player stats)
turn_ends() -> time's up for this client, his turn has ended
game_ends() -> end of game, tells the client whether or not he has won


When a client connects, the following messages are sent:
client -> server: connect()
server -> client: send_database_data()
server -> client: send_map_data()
client -> server: set_mode()
client -> server: set_name()
client -> server: ready()

When all clients have signalled that they're ready, the server starts the game.
He stops listening for new connections.
The server only needs to listen for messages from one client at a time, but he will
need to broadcast messages to all observers + that one client.

Send more parameters to server at start-up: turn-time, fog-of-war on/off?


NOTE: Each message has a prepended sizeof unsigned integer. This uint denotes the number of bytes that will follow.
Technically, it's not part of the message, so if a message is 12 bytes, a total of 16 bytes will be sent (the sizeof
uint + the 12 message bytes), but the sizeof uint will say '12', not '16'.

NOTE: Each message should have an identifier byte prepended to it. This is part of the message
and so counts towards it's size.

NOTE: Game commands are going to change a bit: instead of embedding a movement command into others, they are now separated.
So a unit that attacks another will typically send two commands: one to move towards it's target,
and another command for the actual attack. Units will be handled like that, too: they have two phases, a movement and an
action phase.



Movement action: unitID, route (route starts one tile next to unit and ends at destination, must be valid route) --> can be trapped!
NOTE: Loading a unit into another unit is done by moving it on top of that unit! If the unit at the destination can not transport
that unit type, or if it is full, the action fill fail in it's entirity.


Unload action: unitID, destination (unit has to be loaded in a unit that's next to the destination, destination must be free)
Supply surrounding units action: unitID (unit must be able to supply, must at least be one friendly unit in a neighboring tile)
Attack action: unitID, targetID (target unit has to be in range of unit)
Combine units action: unitID, targetID (unit has to be next to target, target has to be damaged, must be of same type)
Build unit action: buildingID, unitTypeID (building must be able to build unit type, player must have sufficient funds, building must not be occupied)
Capture building action: unitID (unit must be able to capture, unit must stand on top of building, building must not be owned by player)
Hide unit: unitID (unit must be able to hide)

All actions will be replied to with a 'failed' confirmation message if the above prerequisites are not met.